//THIS IS THE NEW FILE PLEASE IMPORT ALL FUNCTIONS
#include <stdio.h>
#include <stdbool.h>
#include <wchar.h>
#include <stdlib.h>
#include <time.h>
#include <locale.h>

// Windows-specific headers
#ifdef _WIN32
#include <io.h>
#include <fcntl.h>
#endif
#ifdef __APPLE__
#include<locale.h>
#endif
// Game symbols (wide characters)
const wchar_t block = L'█';
const wchar_t characterUp = L'˅';
const wchar_t characterDown = L'^';
const wchar_t characterLeft = L'>';
const wchar_t characterRight = L'<';
const wchar_t ghost = L'ᗣ';
const wchar_t pellet = L'•';
const wchar_t powerPellet = L'⬤';
const wchar_t emptySpace = L' ';

#define ROWS 21
#define COLS 19

wchar_t map[ROWS][COLS] = {
    {block, block, block, block, block, block, block, block, block, block, block, block, block, block, block, block, block, block, block},
    {block, pellet, pellet, pellet, pellet, pellet, pellet, pellet, pellet, block, pellet, pellet, pellet, pellet, pellet, pellet, pellet, pellet, block},
    {block, powerPellet, block, block, pellet, block, block, block, pellet, block, pellet, block, block, block, pellet, block, block, powerPellet, block},
    {block, pellet, pellet, pellet, pellet, pellet, pellet, pellet, pellet, pellet, pellet, pellet, pellet, pellet, pellet, pellet, pellet, pellet, block},
    {block, pellet, block, block, pellet, block, pellet, block, block, block, block, block, pellet, block, pellet, block, block, pellet, block},
    {block, pellet, pellet, pellet, pellet, block, pellet, pellet, pellet, block, pellet, pellet, pellet, block, pellet, pellet, pellet, pellet, block},
    {block, block, block, block, pellet, block, block, block, emptySpace, block, emptySpace, block, block, block, pellet, block, block, block, block},
    {emptySpace, emptySpace, emptySpace, block, pellet, block, emptySpace, emptySpace, emptySpace, ghost, emptySpace, emptySpace, emptySpace, block, pellet, block, emptySpace, emptySpace, emptySpace},
    {block, block, block, block, pellet, block, emptySpace, block, block, emptySpace, block, block, emptySpace, block, pellet, block, block, block, block}, 
    {emptySpace, emptySpace, emptySpace, emptySpace, pellet, emptySpace, emptySpace, block, ghost, ghost, ghost, block, emptySpace, emptySpace, pellet, emptySpace, emptySpace, emptySpace, emptySpace},
    {block, block, block, block, pellet, block, emptySpace, block, block, block, block, block, emptySpace, block, pellet, block, block, block, block},
    {emptySpace, emptySpace, emptySpace, block, pellet, block, emptySpace, emptySpace, emptySpace, emptySpace, emptySpace, emptySpace, emptySpace, block, pellet, block, emptySpace, emptySpace, emptySpace},
    {block, block, block, block, pellet, block, emptySpace, block, block, block, block, block, emptySpace, block, pellet, block, block, block, block},
    {block, pellet, pellet, pellet, pellet, pellet, pellet, pellet, pellet, block, pellet, pellet, pellet, pellet, pellet, pellet, pellet, pellet, block},
    {block, pellet, block, block, pellet, block, block, block, pellet, block, pellet, block, block, block, pellet, block, block, pellet, block},
    {block, powerPellet, pellet, block, pellet, pellet, pellet, pellet, pellet, characterUp, pellet, pellet, pellet, pellet, pellet, block, pellet, powerPellet, block},
    {block, block, pellet, block, pellet, block, pellet, block, block, block, block, block, pellet, block, pellet, block, pellet, block, block},
    {block, pellet, pellet, pellet, pellet, block, pellet, pellet, pellet, block, pellet, pellet, pellet, block, pellet, pellet, pellet, pellet, block},
    {block, pellet, block, block, block, block, block, block, pellet, block, pellet, block, block, block, block, block, block, pellet, block},
    {block, pellet, pellet, pellet, pellet, pellet, pellet, pellet, pellet, pellet, pellet, pellet, pellet, pellet, pellet, pellet, pellet, pellet, block},
    {block, block, block, block, block, block, block, block, block, block, block, block, block, block, block, block, block, block, block}
};

// Initialize console for Unicode (cross-platform)
void init_console() {
    #ifdef _WIN32
        _setmode(_fileno(stdout), _O_U16TEXT); // Windows
    #else
        setlocale(LC_ALL, "en_US.UTF-8"); // Mac/Linux
    #endif
}

// Print the game map
void display_map() {
    for (int i = 0; i < ROWS; i++) {
        for (int j = 0; j < COLS; j++) {
            wprintf(L"%lc", map[i][j]);
        }
        wprintf(L"\n");
    }
}

int main() {
#ifdef __APPLE__
    setlocale(LC_ALL, "en_US.UTF-8");
#endif
    init_console(); // Set up Unicode output

    int userCord[2] = {15, 9}; // Player position (row, col)
    bool running = true;

    while (running) {
        display_map();

        wchar_t input;
        wprintf(L"Enter move (w/a/s/d) or '0' to quit: ");
        wscanf(L" %lc", &input);

        if (input == L'0') {
            running = false;
        } else {
            // Move logic (simplified for example)
            switch (input) {
                case L'w': if (userCord[0] > 0) userCord[0]--; break;
                case L's': if (userCord[0] < ROWS-1) userCord[0]++; break;
                case L'a': if (userCord[1] > 0) userCord[1]--; break;
                case L'd': if (userCord[1] < COLS-1) userCord[1]++; break;
            }
        }
    }

    return 0;
}
